generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SiteSettings {
  id                    String   @id @default(uuid())
  artistName            String   @default("Artist") // Editable artist name
  heroType              String   @default("video") // 'video', 'image', or 'both'
  heroMediaUrl          String?
  heroMediaUrlMobile    String?
  heroOpacity           Float    @default(0.6)
  heroOpacityMobile     Float    @default(0.6)
  heroTitle             String   @default("Welcome")
  heroSubtitle          String?
  headerOpacity         Float    @default(0.95) // Navbar opacity when scrolled
  headerOpacityTop      Float    @default(0.0) // Navbar opacity at top of page
  primaryColor          String   @default("#9333ea") // neon purple
  secondaryColor        String   @default("#000000") // black
  accentColor           String   @default("#a855f7")
  backgroundColor       String   @default("#000000")
  backgroundOpacity     Float    @default(1.0)
  fanClubAccessFee      Float    @default(0.0) // Can be set to 0 for free
  liveEventFee          Float    @default(5.0)
  enableParallax        Boolean  @default(true)
  enableParticles       Boolean  @default(true)
  stickyPlayerAutoOpen  Boolean  @default(false)
  // Contact & Social Media
  contactEmail          String?
  instagramUrl          String?
  facebookUrl           String?
  twitterUrl            String?
  youtubeUrl            String?
  spotifyUrl            String?
  appleMusicUrl         String?
  soundcloudUrl         String?
  tiktokUrl             String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Admin {
  id           String   @id @default(uuid())
  email        String   @unique
  passcode     String? // hashed passcode if using passcode auth
  magicToken   String?
  tokenExpiry  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MusicItem {
  id                String   @id @default(uuid())
  title             String
  artist            String   @default("")
  description       String?
  thumbnailUrl      String?
  embedUrl          String? // Spotify, Apple Music, SoundCloud
  embedType         String   @default("spotify") // spotify, apple, soundcloud
  price             Float?
  downloadUrl       String? // signed URL for purchased tracks
  isPurchasable     Boolean  @default(false)
  displayOrder      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  purchases         Purchase[]
}

model Video {
  id            String   @id @default(uuid())
  title         String
  description   String?
  thumbnailUrl  String?
  videoUrl      String // YouTube, Vimeo, or direct URL
  videoType     String   @default("youtube") // youtube, vimeo, upload
  price         Float?
  isPurchasable Boolean  @default(false)
  displayOrder  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  purchases     Purchase[]
}

model GalleryAlbum {
  id           String   @id @default(uuid())
  name         String
  description  String?
  coverUrl     String?
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  photos       Photo[]
}

model Photo {
  id           String        @id @default(uuid())
  url          String
  caption      String?
  displayOrder Int           @default(0)
  albumId      String
  album        GalleryAlbum  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Event {
  id           String   @id @default(uuid())
  title        String
  description  String?
  venue        String
  location     String
  eventDate    DateTime
  ticketUrl    String?
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MerchItem {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  checkoutUrl  String? // Stripe or Shopify link
  stock        Int      @default(0)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       OrderItem[]
}

model AboutSection {
  id           String   @id @default(uuid())
  title        String
  content      String
  bgColor      String   @default("#1f1f1f")
  bgOpacity    Float    @default(0.9)
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Subscriber {
  id                String            @id @default(uuid())
  email             String            @unique
  name              String?
  isFanClub         Boolean           @default(false)
  hasAccess         Boolean           @default(false)
  accessExpiry      DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  payments          Payment[]
  liveParticipants  LiveParticipant[]
  liveAccessTokens  LiveAccessToken[]
}

model Order {
  id           String      @id @default(uuid())
  customerEmail String
  customerName String?
  totalAmount  Float
  status       String      @default("pending") // pending, completed, failed
  paymentType  String      // stripe, paypal, mpesa
  paymentId    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  items        OrderItem[]
  payment      Payment?
}

model OrderItem {
  id        String    @id @default(uuid())
  orderId   String
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  merchId   String?
  merch     MerchItem? @relation(fields: [merchId], references: [id])
  quantity  Int       @default(1)
  price     Float
  createdAt DateTime  @default(now())
}

model Payment {
  id             String      @id @default(uuid())
  type           String      // donation, fan_club, music, merch
  amount         Float
  paymentMethod  String      // stripe, paypal, mpesa
  status         String      @default("pending")
  customerId     String?
  subscriberId   String?
  subscriber     Subscriber? @relation(fields: [subscriberId], references: [id])
  orderId        String?     @unique
  order          Order?      @relation(fields: [orderId], references: [id])
  metadata       String?     // JSON string for additional data
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Purchase {
  id            String    @id @default(uuid())
  contentType   String    // "music" or "video"
  musicItemId   String?
  musicItem     MusicItem? @relation(fields: [musicItemId], references: [id])
  videoId       String?
  video         Video?    @relation(fields: [videoId], references: [id])
  customerEmail String
  customerName  String?
  amount        Float
  paymentMethod String    @default("paypal") // paypal, stripe, mpesa
  paymentId     String?   // External payment ID from payment processor
  paymentStatus String    @default("completed") // pending, completed, failed, refunded
  accessToken   String    @unique
  expiresAt     DateTime?  // null for lifetime access
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ContactSubmission {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String
  type      String   @default("general") // general, booking, press
  createdAt DateTime @default(now())
}

model LiveEvent {
  id                String            @id @default(uuid())
  title             String
  description       String?
  scheduledAt       DateTime
  startedAt         DateTime?
  endedAt           DateTime?
  status            String            @default("scheduled") // scheduled, live, ended, cancelled
  accessFee         Float             @default(5.0)
  maxParticipants   Int?              @default(100)
  thumbnailUrl      String?
  streamUrl         String?           // WebRTC room URL or stream endpoint
  participants      LiveParticipant[]
  accessTokens      LiveAccessToken[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model LiveParticipant {
  id            String     @id @default(uuid())
  liveEventId   String
  liveEvent     LiveEvent  @relation(fields: [liveEventId], references: [id], onDelete: Cascade)
  subscriberId  String
  subscriber    Subscriber @relation(fields: [subscriberId], references: [id])
  joinedAt      DateTime   @default(now())
  leftAt        DateTime?
  micEnabled    Boolean    @default(false)
  videoEnabled  Boolean    @default(false)
  handRaised    Boolean    @default(false)
  
  @@unique([liveEventId, subscriberId])
}

model LiveAccessToken {
  id            String     @id @default(uuid())
  liveEventId   String
  liveEvent     LiveEvent  @relation(fields: [liveEventId], references: [id], onDelete: Cascade)
  subscriberId  String
  subscriber    Subscriber @relation(fields: [subscriberId], references: [id])
  token         String     @unique
  paymentId     String?    // Reference to Payment record
  expiresAt     DateTime
  used          Boolean    @default(false)
  usedAt        DateTime?
  createdAt     DateTime   @default(now())
}
